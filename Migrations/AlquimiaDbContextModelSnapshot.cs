// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backendAlquimia.Data;

#nullable disable

namespace backendAlquimia.Migrations
{
    [DbContext(typeof(AlquimiaDbContext))]
    partial class AlquimiaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CombinacionNota", b =>
                {
                    b.Property<int>("CombinacionId")
                        .HasColumnType("int");

                    b.Property<int>("NotaSalidaId")
                        .HasColumnType("int");

                    b.HasKey("CombinacionId", "NotaSalidaId");

                    b.HasIndex("NotaSalidaId");

                    b.ToTable("CombinacionNotaSalida", (string)null);
                });

            modelBuilder.Entity("CombinacionNota1", b =>
                {
                    b.Property<int>("Combinacion1Id")
                        .HasColumnType("int");

                    b.Property<int>("NotaCorazonId")
                        .HasColumnType("int");

                    b.HasKey("Combinacion1Id", "NotaCorazonId");

                    b.HasIndex("NotaCorazonId");

                    b.ToTable("CombinacionNotaCorazon", (string)null);
                });

            modelBuilder.Entity("CombinacionNota2", b =>
                {
                    b.Property<int>("Combinacion2Id")
                        .HasColumnType("int");

                    b.Property<int>("NotaFondoId")
                        .HasColumnType("int");

                    b.HasKey("Combinacion2Id", "NotaFondoId");

                    b.HasIndex("NotaFondoId");

                    b.ToTable("CombinacionNotaFondo", (string)null);
                });

            modelBuilder.Entity("Intensidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("ConcentracionAgua")
                        .HasColumnType("float");

                    b.Property<double>("ConcentracionAlcohol")
                        .HasColumnType("float");

                    b.Property<double>("ConcentracionEsencia")
                        .HasColumnType("float");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Intensidades");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Combinacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Combinaciones");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.CreacionFinal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreadorId")
                        .HasColumnType("int");

                    b.Property<int>("FormulaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreadorId");

                    b.HasIndex("FormulaId");

                    b.ToTable("CreacionesFinales");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.FamiliaOlfativa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Nota")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("FamiliasOlfativas");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Formula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CombinacionId")
                        .HasColumnType("int");

                    b.Property<int>("IntensidadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CombinacionId");

                    b.HasIndex("IntensidadId");

                    b.ToTable("Formulas");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Nota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FamiliaOlfativaId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("FamiliaOlfativaId");

                    b.ToTable("Notas");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Producto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("CreacionFinalId")
                        .HasColumnType("int");

                    b.Property<int?>("CreadorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int>("TipoProductoId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("CreacionFinalId");

                    b.HasIndex("CreadorId");

                    b.HasIndex("ProveedorId");

                    b.HasIndex("TipoProductoId");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.TipoProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TiposProducto");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Creador", b =>
                {
                    b.HasBaseType("backendAlquimia.Data.Entities.Usuario");

                    b.ToTable("Creadores", (string)null);
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Proveedor", b =>
                {
                    b.HasBaseType("backendAlquimia.Data.Entities.Usuario");

                    b.Property<string>("Cuil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Proveedores", (string)null);
                });

            modelBuilder.Entity("CombinacionNota", b =>
                {
                    b.HasOne("backendAlquimia.Data.Entities.Combinacion", null)
                        .WithMany()
                        .HasForeignKey("CombinacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backendAlquimia.Data.Entities.Nota", null)
                        .WithMany()
                        .HasForeignKey("NotaSalidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CombinacionNota1", b =>
                {
                    b.HasOne("backendAlquimia.Data.Entities.Combinacion", null)
                        .WithMany()
                        .HasForeignKey("Combinacion1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backendAlquimia.Data.Entities.Nota", null)
                        .WithMany()
                        .HasForeignKey("NotaCorazonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CombinacionNota2", b =>
                {
                    b.HasOne("backendAlquimia.Data.Entities.Combinacion", null)
                        .WithMany()
                        .HasForeignKey("Combinacion2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backendAlquimia.Data.Entities.Nota", null)
                        .WithMany()
                        .HasForeignKey("NotaFondoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.CreacionFinal", b =>
                {
                    b.HasOne("backendAlquimia.Data.Entities.Creador", "Creador")
                        .WithMany("HistorialDeCreaciones")
                        .HasForeignKey("CreadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backendAlquimia.Data.Entities.Formula", "Formula")
                        .WithMany()
                        .HasForeignKey("FormulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creador");

                    b.Navigation("Formula");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Formula", b =>
                {
                    b.HasOne("backendAlquimia.Data.Entities.Combinacion", "Combinacion")
                        .WithMany()
                        .HasForeignKey("CombinacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intensidad", "Intensidad")
                        .WithMany()
                        .HasForeignKey("IntensidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combinacion");

                    b.Navigation("Intensidad");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Nota", b =>
                {
                    b.HasOne("backendAlquimia.Data.Entities.FamiliaOlfativa", "FamiliaOlfativa")
                        .WithMany("Notas")
                        .HasForeignKey("FamiliaOlfativaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FamiliaOlfativa");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Producto", b =>
                {
                    b.HasOne("backendAlquimia.Data.Entities.CreacionFinal", null)
                        .WithMany("Productos")
                        .HasForeignKey("CreacionFinalId");

                    b.HasOne("backendAlquimia.Data.Entities.Creador", null)
                        .WithMany("CarritoDeCompras")
                        .HasForeignKey("CreadorId");

                    b.HasOne("backendAlquimia.Data.Entities.Proveedor", "Proveedor")
                        .WithMany("Productos")
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backendAlquimia.Data.Entities.TipoProducto", "TipoProducto")
                        .WithMany()
                        .HasForeignKey("TipoProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proveedor");

                    b.Navigation("TipoProducto");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Creador", b =>
                {
                    b.HasOne("backendAlquimia.Data.Entities.Usuario", null)
                        .WithOne()
                        .HasForeignKey("backendAlquimia.Data.Entities.Creador", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Proveedor", b =>
                {
                    b.HasOne("backendAlquimia.Data.Entities.Usuario", null)
                        .WithOne()
                        .HasForeignKey("backendAlquimia.Data.Entities.Proveedor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.CreacionFinal", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.FamiliaOlfativa", b =>
                {
                    b.Navigation("Notas");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Creador", b =>
                {
                    b.Navigation("CarritoDeCompras");

                    b.Navigation("HistorialDeCreaciones");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Proveedor", b =>
                {
                    b.Navigation("Productos");
                });
#pragma warning restore 612, 618
        }
    }
}
