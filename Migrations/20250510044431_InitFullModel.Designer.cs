// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backendAlquimia.Data;

#nullable disable

namespace backendAlquimia.Migrations
{
    [DbContext(typeof(AlquimiaDbContext))]
    [Migration("20250510044431_InitFullModel")]
    partial class InitFullModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CombinacionNota", b =>
                {
                    b.Property<int>("CombinacionId")
                        .HasColumnType("int");

                    b.Property<int>("NotaSalidaId")
                        .HasColumnType("int");

                    b.HasKey("CombinacionId", "NotaSalidaId");

                    b.HasIndex("NotaSalidaId");

                    b.ToTable("CombinacionNotaSalida", (string)null);
                });

            modelBuilder.Entity("CombinacionNota1", b =>
                {
                    b.Property<int>("Combinacion1Id")
                        .HasColumnType("int");

                    b.Property<int>("NotaCorazonId")
                        .HasColumnType("int");

                    b.HasKey("Combinacion1Id", "NotaCorazonId");

                    b.HasIndex("NotaCorazonId");

                    b.ToTable("CombinacionNotaCorazon", (string)null);
                });

            modelBuilder.Entity("CombinacionNota2", b =>
                {
                    b.Property<int>("Combinacion2Id")
                        .HasColumnType("int");

                    b.Property<int>("NotaFondoId")
                        .HasColumnType("int");

                    b.HasKey("Combinacion2Id", "NotaFondoId");

                    b.HasIndex("NotaFondoId");

                    b.ToTable("CombinacionNotaFondo", (string)null);
                });

            modelBuilder.Entity("Intensidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Intensidades");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PedidoProducto", b =>
                {
                    b.Property<int>("PedidoId")
                        .HasColumnType("int");

                    b.Property<int>("ProductosId")
                        .HasColumnType("int");

                    b.HasKey("PedidoId", "ProductosId");

                    b.HasIndex("ProductosId");

                    b.ToTable("PedidoProducto");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Combinacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Combinaciones");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.CreacionFinal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("ConcentracionAgua")
                        .HasColumnType("float");

                    b.Property<double>("ConcentracionAlcohol")
                        .HasColumnType("float");

                    b.Property<double>("ConcentracionEsencia")
                        .HasColumnType("float");

                    b.Property<int>("CreadorId")
                        .HasColumnType("int");

                    b.Property<int>("IdFormula")
                        .HasColumnType("int");

                    b.Property<int>("IdPedido")
                        .HasColumnType("int");

                    b.Property<int>("IdProducto")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreadorId");

                    b.HasIndex("IdFormula");

                    b.HasIndex("IdPedido");

                    b.ToTable("CreacionesFinales");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.FamiliaOlfativa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("FamiliasOlfativas");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Formula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CombinacionId")
                        .HasColumnType("int");

                    b.Property<int>("CombinacionId1")
                        .HasColumnType("int");

                    b.Property<int>("CreadorId")
                        .HasColumnType("int");

                    b.Property<int>("IntensidadId")
                        .HasColumnType("int");

                    b.Property<int>("IntensidadId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CombinacionId");

                    b.HasIndex("CombinacionId1");

                    b.HasIndex("CreadorId");

                    b.HasIndex("IntensidadId");

                    b.HasIndex("IntensidadId1");

                    b.ToTable("Formulas");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Nota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FamiliaOlfativaId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("NotasCompatiblesIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotasIncompatiblesIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FamiliaOlfativaId");

                    b.ToTable("Notas");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Pedidos", (string)null);
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreacionFinalId")
                        .HasColumnType("int");

                    b.Property<int?>("CreadorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdProveedor")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoProducto")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int>("TipoProductoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreacionFinalId");

                    b.HasIndex("CreadorId");

                    b.HasIndex("ProveedorId");

                    b.HasIndex("TipoProductoId");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.TipoProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TiposProducto");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Usuarios", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Creador", b =>
                {
                    b.HasBaseType("backendAlquimia.Data.Entities.Usuario");

                    b.ToTable("Creadores", (string)null);
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Proveedor", b =>
                {
                    b.HasBaseType("backendAlquimia.Data.Entities.Usuario");

                    b.ToTable("Proveedores", (string)null);
                });

            modelBuilder.Entity("CombinacionNota", b =>
                {
                    b.HasOne("backendAlquimia.Data.Entities.Combinacion", null)
                        .WithMany()
                        .HasForeignKey("CombinacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backendAlquimia.Data.Entities.Nota", null)
                        .WithMany()
                        .HasForeignKey("NotaSalidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CombinacionNota1", b =>
                {
                    b.HasOne("backendAlquimia.Data.Entities.Combinacion", null)
                        .WithMany()
                        .HasForeignKey("Combinacion1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backendAlquimia.Data.Entities.Nota", null)
                        .WithMany()
                        .HasForeignKey("NotaCorazonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CombinacionNota2", b =>
                {
                    b.HasOne("backendAlquimia.Data.Entities.Combinacion", null)
                        .WithMany()
                        .HasForeignKey("Combinacion2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backendAlquimia.Data.Entities.Nota", null)
                        .WithMany()
                        .HasForeignKey("NotaFondoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("backendAlquimia.Data.Entities.Rol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("backendAlquimia.Data.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("backendAlquimia.Data.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("backendAlquimia.Data.Entities.Rol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backendAlquimia.Data.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("backendAlquimia.Data.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PedidoProducto", b =>
                {
                    b.HasOne("backendAlquimia.Data.Entities.Pedido", null)
                        .WithMany()
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backendAlquimia.Data.Entities.Producto", null)
                        .WithMany()
                        .HasForeignKey("ProductosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.CreacionFinal", b =>
                {
                    b.HasOne("backendAlquimia.Data.Entities.Creador", "Creador")
                        .WithMany("HistorialDeCreaciones")
                        .HasForeignKey("CreadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backendAlquimia.Data.Entities.Formula", "Formula")
                        .WithMany()
                        .HasForeignKey("IdFormula")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backendAlquimia.Data.Entities.Pedido", "Pedido")
                        .WithMany()
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creador");

                    b.Navigation("Formula");

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Formula", b =>
                {
                    b.HasOne("backendAlquimia.Data.Entities.Combinacion", null)
                        .WithMany()
                        .HasForeignKey("CombinacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backendAlquimia.Data.Entities.Combinacion", "Combinacion")
                        .WithMany()
                        .HasForeignKey("CombinacionId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backendAlquimia.Data.Entities.Creador", "Creador")
                        .WithMany("Formulas")
                        .HasForeignKey("CreadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Intensidad", null)
                        .WithMany()
                        .HasForeignKey("IntensidadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Intensidad", "Intensidad")
                        .WithMany()
                        .HasForeignKey("IntensidadId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combinacion");

                    b.Navigation("Creador");

                    b.Navigation("Intensidad");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Nota", b =>
                {
                    b.HasOne("backendAlquimia.Data.Entities.FamiliaOlfativa", "FamiliaOlfativa")
                        .WithMany("Notas")
                        .HasForeignKey("FamiliaOlfativaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FamiliaOlfativa");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Producto", b =>
                {
                    b.HasOne("backendAlquimia.Data.Entities.CreacionFinal", null)
                        .WithMany("Productos")
                        .HasForeignKey("CreacionFinalId");

                    b.HasOne("backendAlquimia.Data.Entities.Creador", null)
                        .WithMany("CarritoDeCompras")
                        .HasForeignKey("CreadorId");

                    b.HasOne("backendAlquimia.Data.Entities.Proveedor", "Proveedor")
                        .WithMany("Productos")
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backendAlquimia.Data.Entities.TipoProducto", "TipoProducto")
                        .WithMany()
                        .HasForeignKey("TipoProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proveedor");

                    b.Navigation("TipoProducto");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Creador", b =>
                {
                    b.HasOne("backendAlquimia.Data.Entities.Usuario", null)
                        .WithOne()
                        .HasForeignKey("backendAlquimia.Data.Entities.Creador", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Proveedor", b =>
                {
                    b.HasOne("backendAlquimia.Data.Entities.Usuario", null)
                        .WithOne()
                        .HasForeignKey("backendAlquimia.Data.Entities.Proveedor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.CreacionFinal", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.FamiliaOlfativa", b =>
                {
                    b.Navigation("Notas");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Creador", b =>
                {
                    b.Navigation("CarritoDeCompras");

                    b.Navigation("Formulas");

                    b.Navigation("HistorialDeCreaciones");
                });

            modelBuilder.Entity("backendAlquimia.Data.Entities.Proveedor", b =>
                {
                    b.Navigation("Productos");
                });
#pragma warning restore 612, 618
        }
    }
}
